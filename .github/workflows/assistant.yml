name: 'Assistant'

on:
  workflow_call:
    inputs:
      additional_context:
        type: string
        required: false
        description: 'Extra context from the dispatcher/command'

concurrency:
  group: '${{ github.workflow }}-assistant-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      # نبني برومبت آمن من حدث GitHub بدون تعابير YAML معقدة
      - name: 'Build prompt'
        id: prompt
        env:
          ADDITIONAL_CONTEXT: ${{ inputs.additional_context }}
        run: |
          set -euo pipefail

          TITLE=$(jq -r '.pull_request.title // .issue.title // ""' "$GITHUB_EVENT_PATH")
          DESCRIPTION=$(jq -r '.pull_request.body // .issue.body // ""' "$GITHUB_EVENT_PATH")
          ISSUE_NUMBER=$(jq -r '.pull_request.number // .issue.number // ""' "$GITHUB_EVENT_PATH")
          EVENT_NAME="${GITHUB_EVENT_NAME:-}"
          REPOSITORY="${GITHUB_REPOSITORY:-}"
          IS_PULL_REQUEST=$(jq -r 'has("pull_request")' "$GITHUB_EVENT_PATH")

          cat > full_prompt.txt <<'PROMPT'
## Persona & Operating Mode
You are **Claude**, a world-class autonomous software assistant running inside GitHub Actions. Be concise, action-oriented, and safe.

## Inputs (untrusted)
- Title: ${TITLE}
- Description: ${DESCRIPTION}
- Event: ${EVENT_NAME}
- Is PR: ${IS_PULL_REQUEST}
- Issue/PR #: ${ISSUE_NUMBER}
- Repository: ${REPOSITORY}
- Additional Context: ${ADDITIONAL_CONTEXT}

## Constraints
- Do NOT run repo commands. You only **write back a comment** with a clear plan or answer.
- Never paste full secrets or large file blobs.
- Keep answers practical (checklists, short diffs, commands for humans to run).

## Output
Produce **one** Markdown comment that includes:
1) Short intent summary.
2) “Plan of Action” checklist (if a task).
3) Any actionable code/diff snippets if needed (unified diff fenced in ```diff).
4) Ask for `/approve` or clarifying info when appropriate.

PROMPT

          # حقن القيم بأمان (استبدال نصي بسيط لأننا سنحوّل لاحقًا إلى JSON)
          sed -i "s|\${TITLE}|${TITLE}|g" full_prompt.txt
          sed -i "s|\${DESCRIPTION}|${DESCRIPTION}|g" full_prompt.txt
          sed -i "s|\${EVENT_NAME}|${EVENT_NAME}|g" full_prompt.txt
          sed -i "s|\${IS_PULL_REQUEST}|${IS_PULL_REQUEST}|g" full_prompt.txt
          sed -i "s|\${ISSUE_NUMBER}|${ISSUE_NUMBER}|g" full_prompt.txt
          sed -i "s|\${REPOSITORY}|${REPOSITORY}|g" full_prompt.txt
          sed -i "s|\${ADDITIONAL_CONTEXT}|${ADDITIONAL_CONTEXT}|g" full_prompt.txt

          # حوّل البرومبت إلى JSON-safe string
          PROMPT_JSON=$(jq -Rs . < full_prompt.txt)
          echo "PROMPT=${PROMPT_JSON}" >> "$GITHUB_OUTPUT"

      - name: 'Call Anthropic (Claude)'
        id: call
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PROMPT_JSON: ${{ steps.prompt.outputs.PROMPT }}
        run: |
          set -euo pipefail

          printf '%s' \
          "{\"model\":\"claude-3-5-sonnet-latest\",\"max_tokens\":1400,\"messages\":[{\"role\":\"user\",\"content\":${PROMPT_JSON}}]}" \
          > body.json

          curl -s https://api.anthropic.com/v1/messages \
            -H "x-api-key: ${ANTHROPIC_API_KEY}" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @body.json > resp.json

          # استخرج النصوص فقط من مصفوفة content
          jq -r '
            if has("content") then
              .content | map(select(.type=="text") | .text) | join("\n\n")
            else
              ""
            end
          ' resp.json > out.txt

          # Fallback عند عدم وجود نص
          if [ ! -s out.txt ]; then
            echo "I could not generate a response. Please try again with more context." > out.txt
          fi


      - name: 'Post Assistant reply'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('out.txt','utf8').trim() || 'No response.';
            const issue_number = context.payload.issue?.number || context.payload.pull_request?.number;
            if (!issue_number) {
              core.setFailed('No issue/PR number found in event payload.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });

